#!/usr/bin/env python3

Author:            Malena Tomlin
Course/Purpose:    Ops 301 Challenge 11
Date:              12/2023


import psutil
import subprocess
import smtplib
from email.mime.text import MIMEText
from datetime import datetime

try:
    import psutil
except ImportError:
    subprocess.call(['pip', 'install', 'psutil'])

def get_cpu_info():
    cpu_times = psutil.cpu_times()
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    return {'Timestamp': timestamp, **{c: getattr(cpu_times, a, None) for c, a in [
        ('User Mode Time', 'user'), ('Kernel Mode Time', 'system'), ('Idle Time', 'idle'),
        ('Priority User Mode Time', 'nice'), ('I/O Wait Time', 'iowait'), ('Hardware Interrupt Time', 'irq'),
        ('Software Interrupt Time', 'softirq'), ('Virtualized Time', 'steal'), ('Virtual CPU Time', 'guest')
    ]}}

def display_category_info(category, info):
    print(f"{category} Information:\nTimestamp: {info['Timestamp']}\n{category} Time: {info[category]}")

def save_to_text_file(info):
    with open('cpu_info.txt', 'w') as file:
        file.write('\n'.join([f'{k}: {v}' for k, v in info.items()]))
    print("CPU information saved to 'cpu_info.txt'")

def email_info(file_path, recipient_email):
    try:
        with open(file_path, 'r') as file:
            content = file.read()

        msg = MIMEText(content)
        msg['Subject'] = 'CPU Information Report'
        msg['From'] = 'your_email@gmail.com'
        msg['To'] = recipient_email

        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login('your_email@gmail.com', 'password')
            server.sendmail('your_email@gmail.com', recipient_email, msg.as_string())

        print(f"CPU information sent to {recipient_email}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

def main():
    categories = [
        'User Mode Time', 'Kernel Mode Time', 'Idle Time', 'Priority User Mode Time',
        'I/O Wait Time', 'Hardware Interrupt Time', 'Software Interrupt Time',
        'Virtualized Time', 'Virtual CPU Time',
    ]

    while True:
        print("\nOptions:\n" + '\n'.join([f"{i}. {c}" for i, c in enumerate(categories, start=1)]) +
              "\n10. Save CPU Information to File\n11. Email CPU Information\n12. Quit")

        choice = input("Enter your choice (1-12): ")

        if choice in map(str, range(1, 10)):
            category = categories[int(choice) - 1]
            cpu_info = get_cpu_info()
            display_category_info(category, cpu_info)
        elif choice == '10':
            save_to_text_file(get_cpu_info())
        elif choice == '11':
            file_path = 'cpu_info.txt'
            recipient_email = input("Enter recipient email address: ")
            email_info(file_path, recipient_email)
        elif choice == '12':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please select a valid option (1-12).")

if __name__ == "__main__":
    main()


# Sourced from OpenAi
# This was a very long script and it was very easy to error.
